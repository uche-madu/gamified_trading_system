import logging

from sqlalchemy.orm import Session

from app.models.user import User
from app.schemas.users import UserCreate

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class UserService:
    def __init__(self, db: Session):
        self.db = db
        logger.info(f"UserService initialized with session: {db.bind.url}")

    def create_user(self, user_data: UserCreate) -> User:
        """
        Create a new user in the database with a zero balance.
        """
        # Check if the username already exists
        existing_user = (
            self.db.query(User).filter(User.username == user_data.username).first()
        )
        if existing_user:
            raise ValueError("Username already exists.")

        # Create a new user instance and add to the database
        user = User(username=user_data.username)
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)  # Refresh to get updated fields (e.g., autogenerated ID)
        return user

    def get_user(self, user_id: int) -> User:
        """
        Retrieve a user by their ID.
        """
        user = self.db.query(User).filter(User.id == user_id).first()
        if not user:
            raise ValueError("User not found.")
        return user

    def list_users(self) -> list[User]:
        """
        List all users in the database.
        """
        return self.db.query(User).all()

    def deposit_balance(self, user_id: int, amount: float):
        """
        Deposit an amount to the user's balance.
        """
        user = self.get_user(user_id)
        if amount <= 0:
            raise ValueError("Deposit amount must be positive.")
        user.balance += amount
        self.db.commit()

    def withdraw_balance(self, user_id: int, amount: float):
        """
        Withdraw an amount from the user's balance if sufficient funds are available.
        """
        user = self.get_user(user_id)
        if amount <= 0:
            raise ValueError("Withdrawal amount must be positive.")
        if user.balance < amount:
            raise ValueError("Insufficient funds.")
        user.balance -= amount
        self.db.commit()
